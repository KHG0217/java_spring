<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- 
		com.gura.hello 페키지 하위의 모든 페키지를 검사해서 객체를 생성할게 있으면
		직접 생성을 해서 관리를 한다.
		@Controller, @Service, @Repository, @Component 등의 어노테이션이
		클래스에 붙어 있으면 객체 생성을 해서 그 객체의 참조값을 spring framework 가 직접 관리를 한다.
										->관리의 주체가 바뀜 Inverson of Control
														=IOC
														
		생성된 객체를 bean 이라고 하고 bean 들을 모아서 관리하는 박스를 spring bean container라고 한다.
								=>유지보수가 편하게 하기 위해서이다.
	
	-->
	<context:component-scan base-package="com.gura.hello" />
	
	
	
</beans:beans>
